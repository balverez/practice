Arrays and Hashing
Status			Problem													Difficulty	Notes
✓				Contains Duplicate										Easy		Maintain a hash set that holds unique values. Return true when an array element is inspected and detected in the set.
✓				Valid Anagram											Easy		Create a dictionary for each character in the input. Each character mapping should be incremented on every instance in the first string and decremented in the second string. Reject if any mappings in the dictionary are non-zero.
✓				Two Sum													Easy		Create a dictionary that maps the value of an array element to an index. At each iteration, calculate the difference needed to find the target and query the hash table. If the difference is present, return the indices.
✓				Group Anagrams											Medium		Decompose each string into a serialized count of all lower-case characters in the alphabet. Anagrams will have matching serializations. Map these in a dictionary to a list of strings for return later.
✓				Top K Frequent Elements									Medium		Use a dictionary to map number instances. Using these counts, we can set up a bucket sort using the size of the input and tallied instances. Processing the resulting list array in reverse gives us our answer.
✓				Product of Array Except Self							Medium		Calculate the prefix sum into an output array by starting with 1 and updating it at every iteration by multiplying it with nums[i]. Do the same with the postfix on a second pass from right to left to calculate the output.
✓				Valid Sudoku											Medium		Use bitmask arrays to track the state of rows, columns, and subgroups. Subgroups will require special indexing to isolate the 9 sub-grids. Set bits in mask by using OR against a bit shift controlled by the board element.
✓				Encode and Decode Strings								Medium		Use the constraints of the problem to formulate a packet-like approach where the length of the input string is embedded as a char in a prefix to the encoded string. Decode with this prefix in mind and account for the prefix.
✗				Longest Consecutive Subsequence							Medium



Two Pointers
Status			Problem													Difficulty	Notes
✓				Valid Palindrome										Easy		Set up left and right pointers, ensuring that left is always to the left of the right pointer. Evelauate each character in the string from both directions, ensuring that each character is alphanumeric and that they are the same.
✓				Two Sum II												Medium		Iterate through the input with left and right pointers, incrementing the left or decrementing the right depending on the difference between the elements and the target.
✓				3Sum													Medium		Set up a helper method that will calculate Two Sum for target 0. Iterate through the input and execute two sum at elements <= 0. After finding a triplet, increment the left pointer until it reaches a new element to avoid dups.
✓				Container with Most Water								Medium		Use two pointers to create the largest container and compress the container by shifting the smallest of the the two heights. at each iteration until the pointers are in the same array element.
✗				Trapping Rain Water										Hard



Sliding Window
Status			Problem													Difficulty	Notes
✓				Best Time to Buy & Sell Stock							Easy		Track the input minimum in previous entries of the array and compare against the current entry to see evaluate if it is profit maximum. Comparisons can't begin until the second element of the input.
✓				Longest Substring Without Repeating Characters			Medium		Track the start of the sliding window and account for its length in a 0-index scheme. Use a dictionary to store character indices and move the sliding window if a repeat is detected in the window to pass that duplicate.
✓				Longest Repeating Character Replacement					Medium		Use a window and a dictionary to track character counts and length. Assess the length of the window minus the max character count to determine if the number of K replacements has been exhausted and the window need shifting.
✓				Permutation in String									Medium		Use two arrays to track the character counts of the lowercase alphabet. Compare the matches over the intial strings and iterate over the remainder to see if a permutation is found in the string.
✓				Minimum Window Substring								Hard		Use two dictionaries to track the required characters and the window characters. After all required characters have been added to the window, compress it until requirements are no longer met and then continue to expand.
✗				Sliding Window Maximum									Hard



Stack
Status			Problem													Difficulty	Notes
✓				Valid Parentheses										Easy		Use a stack to push closed parantheses when open ones are detected in the input. When a closed parentheses is detected, ensure the stack is both non-empty and pops an identical character. Ensure the stack is empty at the end.
✓				Min Stack												Easy		Use a list to store a tuple holding a value and a minimum up to that point. Track a global minimum and evaluate on both pushes and pops.
✓				Evaluate Reverse Polish Notation						Medium		Use a stack to structure a recursion tree. Use a dictionary to map operators to Func lambdas. Be mindful of the ordering of the integers in this notation, as order matters in division and subtraction.
✓				Generate Parentheses									Medium		Use the number of open parenthesis to determine how many closed ones are needed for a valid set. Use backtracking to generate the sets with the number of remaining closed parenthesis as the base case.
✓				Daily Temperatures										Medium		Use a monotonic stack to store indices in the array as you iterate through the input. If you encounter a temperature hotter than what's on the top of the stack, iterate through the stack and update the output.
✓				Car Fleet												Medium		Imagine the points in 2D space. Sort the input by position and use speed as a slope to calculate a finish time. As new finish times are calculated, detect fleets, amd reset the current time if a a longer finish time is detected.
✗				Largest Rectangle in Histogram							Hard



Binary Search
Status			Problem													Difficulty	Notes
✓				Binary Search											Easy		Make left and right pointers into the array and continuously update them on a pivot.
✓				Search a 2D Matrix										Medium		Treat the 2D matrix as a virtual 1D array since it is sorted. A pivot can be pinpointed by halving the number of elements. The pivot row can be determined by dividing by n and the pivot column can be ascertained by modding by n.
✓				Koko Eating Bananas										Medium		Use binary search to iterate through candidates for k. k should meet the h requirement as close as it can. Controlling our range of iterations via binary search allows for an efficient solution.
✓				Search Rotated Sorted Array								Medium		Split the rotated input with binary search and set up conditions to isolate the needed subarray where the target could potentially be using a pivot. These conditionals should catch rotations based on comparisons to the pivot.
✓				Find Minimum in Rotated Sorted Array					Medium		A rotation can be isolated as the point where consecutive elements are decreasing. The left pointer should be less than the right pointer at the start of the search if there is no rotation, allowing us to short-circuit.
✓				Time Based Key-Value Store								Medium		Use a dictionary to map keys to tuple lists that hold timestamps and values. Retrieve these by searching through the values using binary search. Pay close attention to the edge cases and ranges between timestamps.
✗				Find Median of Two Sorted Arrays						Hard



Linked List
Status			Problem													Difficulty	Notes
✓				Reverse Linked List										Easy		Maintain a sliding window of pointers as the list is reversed, with pointers to previous, next, and current nodes.
✓				Merge Two Linked Lists									Easy		Approach the problem like merge sort and exhaust one of the lists by comparing the two lists' values and taking the minimum at each iteration. After one is exhausted, we can connect our iterator to the remaining list.
✓				Reorder List											Medium		This requires finding the midpoint of the linked list, reversing the second half, and merging the two halves in the specified order.
✓				Remove Nth Node from End of List						Medium		Use two pointers to create a buffer of n-size between them. Iterate the leading pointer n + 1 times ahead and then iterate with pointers in sync. Once the first pointer is null, delete. A sentinel can return the new head.
✓				Copy List with Random Pointer							Medium		Interleave the given list with copies of nodes. Use the combined list to calibrate the random pointers to the correct nodes. Separate the lists afterwards with two iterators and keep track of the new head of the copy.
✓				Add Two Numbers											Medium		Create a sentry to track the new list. Use a running sum to detect instances where we need to carry over to the higher order. Iteratively create new list elements until both input lists are exhausted.
✓				Linked List Cycle										Easy		Use the value range as an offset to edit the input list and detect if an element has been seen before.
✓				Find the Duplicate Number								Medium		Use the constraints to form a graph. Use Floyd's to find the intersection point in the cycle. Reset the slow pointer to the start of the graph and move it until the two pointers intersect again to find the begining of the cycle.
✓				LRU Cache												Medium		Use a bounded doubly linked list to manage the cache. Use a pointer map to track elements. Remove and re-insert elements on gets to the right-most position and remove the left-most element when the map is at capacity.
✗				Merge K Sorted Lists									Hard
✗				Reverse Nodes in K-Group								Hard



Trees
Status			Problem													Difficulty	Notes
✓				Invert Binary Tree										Easy		A binary tree can be inverted either recursively or iteratively by swapping the root's children.
✓				Maximum Depth of Binary Tree							Easy		This can be done recursively with a DFS search that evaluates the max result of each subtree. It can also be done iteratively with a BFS where the depth is incremented as new levels are discovered.
✓				Diameter of a Binary Tree								Easy		This can be done via a recursive DFS where the diameter of each root's subtree is evaluated against a referenced maximum.
✓				Balanced Binary Tree									Easy		Pass a reference to a bool variable that only gets updated if a tree's root detects a large height difference between its subtrees. We can use a recursive Dfs to iterate through the tree and tally the heights.
✓				Same Tree												Easy		Evaluate both root nodes with a xor operation to see if one is non-null. The check if both are null or if the value are equivalent and recursively call the function with the children nodes.
✓				Subtree of Another Tree									Easy		You can iterate through the root until a node with the equivalent value to the subroot is found and trigger a call to see if the subtrees match. Evaluating matching trees can be done recursively and iteratively.
✓				Lowest Common Ancestor of a BST							Easy		Use the properties of a BST for an efficient search of the targets. If each target is on a different subtree, we have found the lowest common ancestor. The search can be done either iteratively or recursively.
✓				Binary Tree Level Order Traversal						Medium		Use two queues for a BFS over the tree that gives a level order traversal. Track the current level in its own queue and collect children in the other. Reset both queues and collect the output once the current level is exhausted.
✓				Binary Tree Right Side View								Medium		We need to collect the right-most element at every level. Using a BFS, we can first collect left nodes into the next level. When the next level is exhausted, we know that the last level pulled from the queue is the right-most.
✓				Count Good Nodes in a Binary Tree						Medium		We can push a tuple onto a queue holding that path's max. If a higher max is eventually encountered on the path, the max can be updated for future nodes in that same path.
✓				Validate Binary Search Tree								Medium		We can perform an inorder traversal that checks that each element is larger than the previous. An iterative approach uses two while loops and a stack to reach the left-most child of a subtree. Check for right children.
✓				Kth Smallest Element in a BST							Medium		Use an inorder traversal and decrement from k until it reaches 0. Once it is at zero, return the node value at that point in the traversal, since an inorder mapping of BST values produces an ordering of least-to-greatest.
✓				Construct Tree from Preorder and Inorder Traversal		Medium		Use the inorder array to recursively bound tree construction calls via indices. Use the fact that the first element of the preorder traversal produces the root and subsequent entries make up more subtrees.
✗				Binary Tree Max Path Sum								Hard
✗				Serialize and Deserialize Binary Tree					Hard



Tries
Status			Problem													Difficulty	Notes
✓				Implement Trie											Medium		Use a Dictionary to map characters to TrieNodes in the TrieNode class. Search and StartsWith can share a subclass that returns a TrieNode for custom evaluation.
✓				Design Add and Search Word Data Structure				Medium		Implement the search method with a helper that can be passed a trie node. This allows wildcard characters to execute searches for substrings with child nodes for every key at the current node.
✗				Word Search II											Hard



Heap and Priority Queue
Status			Problem													Difficulty	Notes
✓				Kth Largest Element in a Stream							Easy		We can use a priority queue that utilizes a min heap and continually trim the structure until it holds k elements. This structure will always hold the kth largest element at the top.
✓				Last Stone Weight										Easy		We can use a priority queue with a custom comparator that turns its sorting implementation into a max heap. The first stone retrieved from the heap will be the largest.
✓				K Closest Points to Origin								Medium		We need to use a min heap priority that utilizes a double as a key. We can store the index of the evaluated point and its calculated distance from the origin into the heap and pull the needed elements for a result.
✓				Kth Largest Element in an Array							Medium		Use a priority queue to collect the array elements. Ensue that it remains at size k so that the kth largest element can be retrieved in constant time.
✓				Task Scheduler											Medium		Use a max heap to track the largest tasks and a queue to track processes on cooldown with a tuple holding the id and the cooldown time. Evaluate the cooldown queue at every iteration and admit tasks into the heap when ready.
✓				Design Twitter											Medium		Use dictionaries to map users to tweets and followers to followees. To retrieve a news feed, use a minheap to store and sort the most recent tweets. Return the contents of the heap in reverse order.
✗				Find Median from Data Stream							Hard



Backtracking
Status			Problem													Difficulty	Notes
✓				Subsets													Medium		Focus on the length of each subset, this allows for a backtracking approach where different candidates are evaluated for length and popped for other data points after getting evaluated.
✓				Combination Sum											Medium		Use a recursive backtracking DFS to produce combinations from each integer in the set of candidates. The base case should be the target sum. Think of it as a binary decision tree that expands as it iterates and backtracks.
✓				Permutations											Medium		Use recursion to generate the permutations of a slice of the input array. Identify the first number to be witheld from the recursive call, remove it from the input, recurse, and add it back to the results and the input.
✓				Subsets II												Medium		Sort the input array and use backtracking to enumerate the subsets. Skip iterations when the start index does not match i in the loop and the ith element is equivalent to the preceding element.
✓				Combination Sum II										Medium		We can sort the input and use controlled backtracking where we skip duplicates in the input. Our base case should be the sum against the target. After an element is examined, we skip any duplicates. Short-circuit large searches.
✓				Word Search												Medium		Use backtracking to execute a search when a trigger is encountered on the grid. Mark the visited cell and expand a BFS to search for the next character in the key. Track the key index and prevent exceeding the boundaries.
✓				Palindrome Partitioning									Medium		Use backtracking with a cache to build out partitions. Only backtrack with viable palindromes and use a sublist to push and pop from. Each candidate at every iteration should start empty.
✓				Letter Combinations of a Phone Number					Medium		Create a static mapping of digit charaters to letters. Use backtracking to iterate on each possible letter for every digit in the string. Collect these in a list with the digit string length as the base case.
✗				N-Queens												Hard



Graphs
Status			Problem													Difficulty	Notes
✓				Number of Islands										Medium		We can scan the input matrix and trigger a DFS or BFS when we detect an island. During the search, we can map an island off the grid, leaving only the unconnected islands on the grid for mapping.
✓				Clone Graph												Medium		The node we retrieve needs to be set up in a queue for iterative neighbor detection. We can use a Dictionary to track previously discovered nodes and easily recover them for neighbor mapping. Make sure not to fall into a cycle.
✓				Max Area of Island										Medium		We can scan the input and trigger an iterative DFS (stacks) or BFS (queues) when an island is detected. As we we map the island, we can keep a count of the area to return it for evaluation.
✓				Pacific Atlantic Waterflow								Medium		Identifying border regions next each ocean allows us to only trigger either DFS or BFS on them to see which regions can underflow to each border region. We can maintain two matrices to evaluate for points that intersect.
✓				Surrounded Regions										Medium		Border regions are the only protected regions. Identifying these and triggering either DFS or BFS on each of them allows us to identify which are protected from being surrounded.
✓				Rotting Oranges											Medium		Identify the count of fresh oranges on the board and craft a BFS that originates from each of the rotting oranges, collecting new rotting oranges in a queue for the next wave after the current minute is exhausted.
✓				Walls and Gates											Medium		Identify the gate cells and queue them for a BFS. This will iterate through all gates and find the nearest neighbors. Ensure the walls and gates are not overwritten and that a BFS ceases when it cannot minimize a path to a gate.
✓				Course Schedule											Medium		Craft a class for each vertex that tacks its search state. Use a DFS to look for cycles within an adjacency list. They occur when a DFS detects a neighbor that has previously been marked as discovered in an ongoing search.
✓				Course Schedule II										Medium		Craft a class for each vertex that tacks its search state. Use a DFS to discover neighbors and search for cycles. Use an linked list to track when vertices completed by the DFS. This should return a topological sort of a DAG.
✓				Redundant Connection									Medium		Use the Union-Find algorithm to detect if two nodes share a parent before being connected and causing a cycle. Use arrays to track both parents and rank. The search should use path compression to expedite future searches.
✓				Number of Connected Components in Graph					Medium		We can identify components by either using a HashSet to mark visited nodes in a DFS, or decrementing the amount components as edges are applied to the graph in a Union-Find approach.
✓				Graph Valid Tree										Medium		Validate that there are n - 1 edges. Any other amount is grounds for invalidation. Use the Union-Find algorithm to validate new edges and ensure there are no cycles.
✓				Word Latter												Hard		Preprocess the collection of strings in the word list to map them to generic transformations. Use the starting word as a graph node and a key to execute a BFS in search of valid transformations that get closer to the end word.



Advanced Graphs
Status			Problem													Difficulty
✓				Reconstruct Itinerary									Hard		We can construct an adjacency list from the lexically sorted input and perform a backtracking DFS to search for the path starting from JFK. Remove edges as the tree is traversed in the DFS and add them back when backtracking.
✓				Min Cost to Connect all Points							Medium		We can perform Prim's MST on the input. Since vertices map to the input array directly, we can just track visited nodes in a bool array. Calculate the minimum distance for each unvisited vertex in a minheap.
✓				Network Delay Time										Medium		Use Dijkstra's algorithm to find the largest shortest path to each of the nodes. When exhausting the minheap, check if the node has been completed and whether it has edges. Check edges to see if their distance can be relaxed.
✓				Swim in Rising Water									Hard		Imagine the grid as a graph, whose edges are adjacent cells and edge weights are cell values. We can use Dijkstra on this graph given the value constraints. Track the largest edge weight for return.
✗				Alien Dictionary										Hard
✗				Cheapest Flights Within K Stops							Medium



1-D Dynamic Programming
Status			Problem													Difficulty	Notes
✓				Climbing Stairs											Easy		A variation on the fibonacci sequence, we can set the first two steps to predetermined values and calculate values for each preceding step. We can use the previous two steps in the fashion of a sliding window at each iteration.
✓				Min Cost Climbing Stairs								Medium		Similar to climbing stairs but instead of tabulating steps, we are keeping a running cost of each step and looking for the minimal cost. We must track the previous two steps using a sliding window.
✓				House Robber											Medium		Examine the previous two indices at each iteration and update the max amount possible to rob. Afterwards, update the indices as you move the sliding window up.
✓				House Robber II											Medium		Use the House Robber approach but modify it to function with input start and end variables. This way we can assess that maximum value from stealing from the first house or the last house.
✓				Longest Palindromic Substring							Medium		Iterate through the string and perform a BFS outwards for both even- and odd-length palindromes. Use left and right pointers to determine length and substring indices.
✓				Palindromic Substrings									Medium		Use a BFS-type search at every element for both even- and odd-length strings. If a palindrome is detected, increment the counter. Use the fact that a single character is a valid palindrome to orient the search.
✓				Decode Ways												Medium		Starting from i = 1, check if the char can create a valid one-digit number. If so, track the number of ways one step back with the current pointer. Add the ways from two steps back if it can create a two-digit number.
✓				Coin Change												Medium		Build out a memo table in a bottom-up manner from 1 to the target amount. Only use coins less than or equal to the iteration, starting from 1. If the amount in the memo table is still default, than the target can't be achieved.
✓				Maximum Product Subarray								Medium		Track both current minimums and maximums while iterating through the input to handle negatives and positives. Check if either should be reset at every iteration and assess whether it will grow or decrease past either tracker.
✓				Word Break												Medium		Use a memo to track where valid substrings are detected. Use the empty string as the base case and add to the memo if the first index of a substring is already marked as valid. A valid string would be marked on the last element.
✓				Longest Increasing Subsequence							Medium		Use a sorted list to track the increasing subsequence. Only add to it if an element is greater than the last item on the list. If an element is equal or smaller, look for the index to replace in the list using binary search.
✓				Partition Equal Subset Sum								Medium		Model a DFS with a memo. Calculate the total sum over the array and halve it for the target base case of the DFS. Use a memo to cache results from the recursion tree.



2-D Dynamic Programming
Status			Problem													Difficulty	Notes
✓				Unique Paths											Medium		The limited graph traversal allows for a controlled distribution of the problem through memoization. We can use previously evaluated cells to identify the number of unique paths in the current cell.
✓				Longest Common Subsequence								Medium		We can define a two-dimensional matrix using the lengths of the inputs (and the empty string) to represent points where identical characters are located. Previously evaluated cells can be used to evaluate new ones. 
✓				Best Time to Buy/Sell Stock With Cooldown				Medium		Conceive of the problem with state machines. At every iteration, there are several possible state changes that need to be accounted for. The held/sold/cooldown states and how they transition from one another provide a solution.
✓				Coin Change II											Medium		Use a memo of size equal to the amount with a base case of 0. For each coin, iterate through the memo and increment at every index where a coin could be used achieve that amount. The last element will hod the combinations.
✓				Target Sum												Medium		Capture the recursion tree in an array bounded by the sums possible, using the sum as an offset. Use the first element as the base cases. Iterating over the input, simulate the tree expanding in a helper array.
✓				Interleaving String										Medium		Use recursion to create a tree that slowly consumes the input strings. Use caching to save repeated paths down the recursion tree stack using the indices of the recursive call.
✓				Longest Increasing Path in a Matrix						Hard		Using a DFS, we can iterate through entries in the matrix and cache results as entries are explored. Unexplored entries can then use these cached results to efficiently calculate the extent of their reach.
✓				Distinct Subsequences									Hard		Use the empty string as a base case. Retrieve the result of s-1, t for s, t. As matching characters are found, use the result of the previous subproblem to complement the current subproblem's result. 
✓				Edit Distance											Hard		Use the empty string as a base case to build intuition. The number of edits to change a string to the empty string is equal to the length of the string. Model the three edits on the grid, and take the minimum when chars match. 
✗				Burst Balloons											Hard
✗				Regular Expression Matching								Hard



Greedy
Status			Problem													Difficulty	Notes
✓				Maximum Subarray										Easy		Devise a method to evaluate the current subarray at every iteration to see if it is either worth supplmenting or needs resetting.
✓				Jump Game												Medium		Maintain a variable that holds the maximum jump possible and decrement it at the start of every step.
✓				Jump Game II											Medium		Consider the array constraints and assess the farthes we can jump at each iteration in the array. When the current jump is exhausted, we want to replace it with this max value and see if we have reached our target.
✓				Gas Station												Medium		Think about the circuit. There needs to be enough gas to at least cover the costs. You can use a running sum over the array to tally the costs and a current counter that can be reset to 0 if negative along with the starting i.
✓				Hand of Straights										Medium		You can use a hash map and a min heap to sort the input and validate sequences. Ensure that the input can be split into the desired groups and the use the consecutive sequencing to consume the map and the heap.
✓				Merge Triplets to Form Target Triplet					Medium		Check each triplet entry and assess whether they any entry exceeds our target bounds. If the triplet passes this check, see if any of the entries match any of our targets.
✓				Partition Labels										Medium		Use a dictionary to track the number of character instances. Then use a hash set to track the unique characters in the current window. Reset the window when all unique characters are zero and add the length to the result.
✗				Valid Parenthesis String								Medium



Intervals
Status			Problem													Difficulty	Notes
✓				Insert Interval											Medium		Create a result list where intervals are iteratively combined from the input list and one variable insert interval. Two intervals can either be sequential one after the other or overlapping.
✓				Merge Intervals											Medium		Sort the input intervals by start and begin assembling the output by assessing each interval against an insert interval. Once an insert interval is put into the output, update it. Add the last insert at the end of the loop.
✓				Non-Overlapping Intervals								Medium		Sort the input array and consolidate the sorted intervals. Increment a counter whenever two overlapping intervals are merged.
✓				Meeting Rooms											Easy		Sort the input array with a custom comparer that sorts by the start time of each interval array. After the input is sorted, loop through and and ensure that the previous interval does not interfere with the current one.
✓				Meeting Rooms II										Medium		Sort the input array by start time and use a minheap to track which meetings will end the fastest using the end time as the key. Dequeue from the heap when an interval starts after the heap's soonest end time. Return the size.
✗				Minimum Interval to Include Each Query					Hard



Math and Geometry
Status			Problem													Difficulty	Notes
✓				Rotate Image											Medium		A clockwise rotation requires a vertical reflection over a transposed matrix. A counterclockwise rotation requires a horizontal reflection over a transposed matrix. In-place modification calls for careful indexing.
✓				Spiral Matrix											Medium		A method of controlling the direction of the iterations and defining the boundaries of the matrix in our search is key.
✓				Set Matrix Zeroes										Medium		Use a flag system to mark columns and rows for zeroing out. Check for zeros in the flag row and column first to see if they will need to be handled at the end. Iterate through the rest of the sub-matrix and set flags as needed.
✓				Happy Number											Easy		Decompose the input number into digits for a sum and use that as the next number in the search for a happy number. A hash set can be used to track seen numbers, or a cycle detecting algorithm involving slow and fast iterators.
✓				Plus One												Easy		Traverse the list right-to-left. If a nine is detected, zero out the entry and proceed in the loop, else increment the entry and return. Account for all 9s outside of the loop by allocating a new n+1 array and heading it with 1.
✓				Pow(x, n)												Medium		Implement an iterative solution that casts the exponent to a long, accounts for negative exponents, and crafts a for loop that halves the exponent at every iteration and only changes the base of 1 on odd exponents.
✗				Multiply Strings										Medium
✗				Detect Squares											Medium



Bit Manipulation
Status			Problem													Difficulty	Notes
✓				Single Number											Easy		Craft a bitmask and use the xor operator to identify the single number.
✓				Number of 1 Bits										Easy		Use the bitwise & operator to slowly decompose n against (n-1). This removes the least significant bit at each iteration, allowing us to count the number of 1 bits in a given bit string.
✓				Counting Bits											Easy		Use the structure of the output to formulate a DP approach. Taking the logical and of numbers n and n - 1 gives us the number of common set bits, allowing us to add at least one as a base case since we are increasing.
✓				Reverse Bits											Easy		Use the bitwise AND operator and bit shifting to reverse the bits. Shift 16 bits in opposite directions, then use hexadecimal to switch places in 8, 4, 2, and 1 bit increments.
✓				Missing Number											Easy		Initialize a bitmask to the length of the input array and use the formatted array input and indices over that input to isolate our target number.
✓				Sum of Two Integers										Medium		We need to use bitwise operations in a loop. We need to identify a carryover variable to form a loop around. We store a temporary carryover value by doing a logical and and a bit shift, XOR a and b and assign b the carryover.
✗				Reverse Integer											Medium			
